[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agentic-prd-generation"
version = "0.1.0"
description = "AI-powered platform for iterative PRD and Technical Specification generation"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Agentic PRD Generation Team"},
]
keywords = ["ai", "prd", "technical-spec", "agents", "llm"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core framework
    "fastapi>=0.110.0",
    "uvicorn[standard]>=0.27.0",
    "streamlit>=1.34.0",

    # LLM clients
    "openai>=1.14.0",
    "google-generativeai>=0.5.0",

    # State management
    "redis[hiredis]>=5.0.0",

    # Streaming
    "sse-starlette>=2.1.0",

    # Data models and validation
    "pydantic>=2.6.0",
    "pydantic-settings>=2.2.0",

    # Async support
    "httpx>=0.27.0",
    "aioredis>=2.0.0",

    # Utilities
    "python-multipart>=0.0.9",
    "python-dotenv>=1.0.0",
    "structlog>=24.1.0",
    "rich>=13.7.0",

    # Data processing
    "markdown>=3.6.0",
    "diff-match-patch>=20230430",
]

[project.optional-dependencies]
dev = [
    # Code quality
    "ruff>=0.3.0",
    "mypy>=1.9.0",
    "pydantic[mypy]>=2.6.0",
    "pre-commit>=3.6.0",

    # Testing
    "pytest>=8.1.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.27.0",  # For testing FastAPI

    # Development tools
    "ipython>=8.22.0",
    "jupyterlab>=4.1.0",
]

test = [
    "pytest>=8.1.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.27.0",
]

agents = [
    # Framework adapters (optional)
    "crewai>=0.28.0",
    "autogen-agentchat>=0.2.0",
    "smolagents>=0.1.0",
]

observability = [
    "opentelemetry-api>=1.23.0",
    "opentelemetry-sdk>=1.23.0",
    "opentelemetry-instrumentation-fastapi>=0.44b0",
    "opentelemetry-instrumentation-redis>=0.44b0",
    "opentelemetry-exporter-otlp>=1.23.0",
]

[project.urls]
Homepage = "https://github.com/your-org/agentic-prd-generation"
Repository = "https://github.com/your-org/agentic-prd-generation"
Documentation = "https://github.com/your-org/agentic-prd-generation/blob/main/docs/"
"Bug Tracker" = "https://github.com/your-org/agentic-prd-generation/issues"

[project.scripts]
agentic-prd = "backend.main:cli"

[tool.setuptools.packages.find]
where = ["."]
include = ["backend*", "frontend*", "agents*"]
exclude = ["tests*"]

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101", "ARG", "FBT"]

[tool.ruff.lint.isort]
known-first-party = ["backend", "frontend", "agents"]
force-sort-within-sections = true

# MyPy configuration
[tool.mypy]
plugins = ["pydantic.mypy"]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
extra_checks = true

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "redis.*",
    "sse_starlette.*",
    "crewai.*",
    "autogen.*",
    "smolagents.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["backend", "frontend"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
